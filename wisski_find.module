<?php
// $Id$

/* provide a search form for top groups
* and searching functionality
*/


// refresh search results 
define('WISSKI_FIND_REFRESH', 1); 
define('WISSKI_FIND_STATIC', 2);
// we also use CACHE_TEMPORARY as 3rd option


function wisski_find_perm() {
  
  return array('use wisski find', 'save wisski find results', 'directly access wisski find');

}


/** Implemenation of hook_menu
*/
function wisski_find_menu () {

  $item['find'] = array(
    'title' => 'Find',
    'page callback' => 'wisski_find_selectGroup',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('use wisski find'),
  );
  
  $item["find/%wisski_find_group"] = array(
    'title' => '',
    'title callback' => 'wisski_find_title',
    'title arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_find_selectPaths2', 1),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('use wisski find'),
  );
  $item["find/%wisski_find_group/do"] = array(
    'title' => 'Find',
    'page callback' => 'wisski_find_do_find',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('directly access wisski find'),
  );
  $item['find/%wisski_find_group/result/%wisski_find_result'] = array(
    'title' => '',
    'title callback' => 'wisski_find_titleResult',
    'title arguments' => array(1, 3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_find_showResult', 1, 3),
//    'page callback' => 'wisski_find_showResult',
//    'page arguments' => array(1, 3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('use wisski find'),
  );
  $item['find/result/%wisski_find_result'] = array(
    'title' => '',
    'title callback' => 'wisski_find_titleResult',
    'title arguments' => array(NULL, 2),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_find_showResult', NULL, 3),
//    'page callback' => 'wisski_find_showResult',
//    'page arguments' => array(1, 3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('use wisski find'),
  );
/*
  $item['find/%wisski_find_group/result/%/%'] = array(
    'title' => '',
    'title callback' => 'wisski_find_titleResult',
    'title arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_find_showResult', 1, 3, 4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('use wisski find'),
  );
*/
  $item['find_js/%wisski_find_group'] = array(
    'title' => '',
    'page callback' => 'wisski_find_ahahAddSearchFieldset',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('use wisski find'),
  );
  
  $item['goto_find'] = array(
    'title' => t('Find'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('find'),
    'access arguments' => array('use wisski find'),
    'menu_name' => 'secondary-links',
    'weight' => -50,
  );

  return $item;

}


/** Implementation of hook_load
*/
function wisski_find_group_load($id) {

  include_once(drupal_get_path('module', 'wisski_pathbuilder') . '/wisski_pathbuilder.inc');
  return wisski_pathbuilder_getPathData($id);

}


function wisski_find_result_load($sid) {

  $tmp = db_query("SELECT * FROM {wisski_find} WHERE sid = '%s'", $sid);
  $record = db_fetch_array($tmp);

  if (!$record) {
    drupal_set_message('The search result was deleted from cache already. Try a new search.', 'error');
  }
  return $record;

}


function wisski_find_cron() {
    // delete all non-permanent results older than one day
  db_query("DELETE FROM {wisski_find} WHERE status = %d and timestamp < %d", CACHE_TEMPORARY, variable_get('wisski_find_cache_expires', time() - 60 * 60 * 24));
}



/**Get group info using the groups name
* @return the first entry in db for which its name is $name
*
* @depricated
*/
function wisski_pathbuilder_getGroupByName($name) {
  
  $result = db_query("SELECT * FROM {wisski_template} WHERE is_group = 1 AND name = '$name'");
  return db_fetch_array($result);
  
}

/**
 * Make visual settings available
 *
 * @author Mark Fichtner
 *
 */
function wisski_find_visualSettings() {
  
  $form = array ();

  $form['wisski_find_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Find Settings'),
    '#weight' => 500,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['wisski_find_fieldset']['wisski_find_defaultNumberOfFields'] = array (
    '#type' => 'textfield',
    '#title' => t('Number of search fields'),
    '#description' => t('A positive number results in the given number of fields. 0 can be set to show all top level fields.'),
    '#default_value' => variable_get('wisski_find_defaultNumberOfFields', 0),
    '#size' => 4,
    '#maxlength' => 255,
  );

  $form['wisski_find_fieldset']['wisski_find_resultItemsPerPage'] = array (
    '#type' => 'textfield',
    '#title' => t('Number of results'),
    '#description' => t('The Number of results to show in find per page. 0 can be set to show all at once. Be careful, this setting is very slow!'),
    '#default_value' => variable_get('wisski_find_resultItemsPerPage', 20),
    '#size' => 4,
    '#maxlength' => 255,
  );

  $form['wisski_find_fieldset']['wisski_find_styleResultPage'] = array(
    '#type' => 'radios',
    '#title' => 'Display Mode',
    '#description' => t('Should find show as a list or as tiles?'),
    '#options' => array('list' => 'list', 'tiles' => 'tiles'),
    '#default_value' => variable_get('wisski_find_styleResultPage', 'list'),
  );

  $form['wisski_find_fieldset']['wisski_find_imageSupport'] = array(
    '#type' => 'checkbox',
    '#title' => t('Image Preview'),
    '#description' => t('Enable a small preview image in the find menu?'),
    '#return_value' => 'yes',
    '#default_value' => variable_get('wisski_find_imageSupport', 'yes'),
  );

  $form['wisski_find_fieldset']['wisski_find_cache_expires'] = array(
    '#type' => 'textfield',
    '#title' => t('Result list refresh'),
    '#description' => t('Bookmarked result lists will be updated after this period. The value is in seconds and must be a positive integer. A "0" means that it will be updated on each use.'),
    '#default_value' => variable_get('wisski_find_cache_expires', 24 * 60 * 60),
    '#element_validate' => array('_wisski_find_cache_expires_validate'),
  );

  $form['wisski_find_fieldset']['wisski_find_default_op'] = array(
    '#type' => 'select',
    '#title' => t('Default operator'),
    '#description' => t('By default, search fields will be combined with this operator'),
    '#options' => array('OR' => t('OR'), 'AND' => t('AND'), 'NOT' => t('NOT')),
    '#default_value' => variable_get('wisski_find_default_op', 'OR'),
  );

  $form['wisski_find_fieldset']['wisski_find_export_path_type'] = array(
    '#type' => 'select',
    '#title' => t('Pathbuilder for result list export'),
    '#options' => wisski_pathbuilder_getPathbuilderTrees(),
    '#description' => t('Select the pathbuilder that should be used for exporting result lists as Excel sheets.'),
    '#default_value' => variable_get('wisski_find_export_path_type', 7),
  );

  return $form;

}

function wisski_find_form_alter(&$form, &$form_state, $form_id) {
    
  if($form_id == 'wisski_visualSettings') {
    $buttons = $form['buttons'];
    unset($form['buttons']);
    $form[] = (wisski_find_visualSettings());  
    $form['buttons'] = $buttons;
  }
}


function _wisski_find_cache_expires_validate($element, $form_state) {
  
  if (preg_match('/\D/', $element['#value'])) {
    form_error($element, t('Only positive integer values allowed'));
  }

}


/** Callback for page title
*/
function wisski_find_title($group) {
  return t('Find') . " " . $group['name'];
}


/* Callback for result page title
*/
function wisski_find_titleResult($group, $record = NULL) {

  if ($record && $record['name']) {
    return $record['name'];
  } elseif ($group) {
    return t('Search results for @group', array('@group' => $group['name']));
  } else {
    return t('Search results');
  }
}



function wisski_find_theme() {

  return array(
/*    'wisski_find_pathRow' => array(
      'arguments' => array('form' => NULL),
    ),
    'wisski_find_pathTable' => array(
      'arguments' => array('form' => NULL),
    )*/
    'wisski_find_searchFieldset' => array(
      'arguments' => array('form' => NULL),
    )
  );

}


/** Build page for selecting a category
*/
function wisski_find_selectGroup() {
  global $base_root, $base_path;
  
  $form['description'] = array(
    '#type' => 'markup',
    '#prefix' => '<p>',
    '#suffix' => '</p>',
    '#value' => t('Search in one of the categories below.'),
    '#weight' => 0,
  );

  $list = wisski_find_add_groups();
  
  return drupal_render($form) . theme('item_list', $list);

}


/**
*/
function _wisski_find_getSearchPaths($group, $indentg = '', $indentp = '', $indent) {
  
  $ftype = wisski_pathbuilder_getPathbuilderTrees();
  $ftype = array_search('Find', $ftype);
  if ($ftype === FALSE) $ftype = 2;

  $ids = "";
  $pds = array(); // pathdata array
  foreach (wisski_pathbuilder_getEnabledInternaMembers($group['id'], TRUE, FALSE, $ftype) as $id) $pds[] = wisski_pathbuilder_getPathData($id);
  
  $paths = array();
  
  foreach ($pds as $pd) {

    if (!$pd['enabled']) continue;
    
    if ($pd['is_group']) { // descend in subgroups recursively (there are no circles or references!)
      
      foreach(_wisski_find_getSearchPaths($pd, $indentp, "$indentp$indent", $indent) as $p) $paths[] = $p;
      
    } else {
      
      $paths[] = array(
        'name' => $indentp . $pd['name'],
        'ids' => array($pd['id'])
      );
      
    }
    
  }
  
  if (count($paths)) {
    $ids = array();
    foreach ($paths as $p) if ($p['ids'] > 0) $ids = array_merge($ids, $p['ids']);
    $ids = array_unique($ids);
    $paths = array_merge(
      array(array(
        'name' => (($indentp == '') ? '' : ($indentg . $group['name'] . ' ')) . t('(all entries)'),
        'ids' => $ids
      )),
      $paths
    );
  }
  
  return (count($paths) == 1) ? array() : $paths; // if no defined paths, then don't put '(all entries)'
  
}



/** Build the search form.
*
*/
function wisski_find_selectPaths2(&$form_state, $group, $id = '') {

  include_once(drupal_get_path('module', 'wisski_pathbuilder') . '/wisski_pathbuilder.inc');

  $ftype = wisski_pathbuilder_getPathbuilderTrees();
  $ftype = array_search('Find', $ftype);
  if ($ftype === FALSE) $ftype = 2;
  
  if ($group === NULL) {
    drupal_set_message("not a valid group.", 'error');
    drupal_goto("find");
  }
  
  $form_state['storage'] = array('group' => $group['id']);
  $form['all']['fields'] = array(
    '#theme' => 'wisski_find_searchFieldset',
  );
  
  $not_first = FALSE; // determine, if it is the first field in table
  
  $nof = variable_get('wisski_find_defaultNumberOfFields', 0);
  $toplevel = TRUE;
  
  // there are three modes of how many
  // search fields are provided and which
  // paths are preselected
  if ($nof == 0) {
    // toplevel paths:
    // all paths that are directly under the top group
    // and aggregate fields for groups under top group
    // and one "all fields" field 
    $nof = count(wisski_pathbuilder_getEnabledInternaMembers($group['id'], TRUE, FALSE, $ftype)) + 1; // plus one extra for "all fields"
  } elseif ($nof > 0) {
    // a fixed number of fields
    // # $nof of fields
    // fields will be preselected with the paths and groups
    // defined directly under top group
    // if there are more fields than paths, they will be
    // filled with "all fields" fields
  } else {  // $nof < 0
    // all paths
    // make a field for each defined path
    // don't make aggregate fields for groups
    $nof = count(_wisski_find_getSearchPaths($group, '','','')) - count(wisski_pathbuilder_getEnabledInternaMembers($group['id'], TRUE, FALSE, $ftype)) + count(wisski_pathbuilder_getEnabledInternaMembers($group['id'], FALSE, FALSE, $ftype)) - 1;
    $toplevel = FALSE;
  }
  
  // make $nof number of fields
  for ($i = 0; $i < $nof; $i++) {
    $tmp = _wisski_find_searchField($group, $i, $not_first, $toplevel);
    $form['all']['fields'] = array_merge($form['all']['fields'], $tmp[1]);
    $form_state['storage']['fields'][] = $tmp[0];
    $not_first = TRUE;  // the first field will not get a AND/OR select field
  }

  $form['all']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  
  if ($id == '') $id = wisski_get_uid();
  $form['sid'] = array(
    '#type' => 'hidden',
    '#value' => $id,
  );
  
  return $form;
  
}



function wisski_find_selectPaths2_validate($form, &$form_state) {
// we will compute the search result in the validate phase
// so that we can trigger an error if the search result is empty
// the search result will be cached and passed to submit stage

  $vals = $form_state['clicked_button']['#post'];
  $fids = $form_state['storage']['fields'];

  // build a search tree from form values
  // see wisski_find_search() for data structure
  $result_fields = array();
  $search = array();
  foreach($fids as $fid) {
    $structs = array();
    
    // check if the field shall be shown on the result
    if (isset($vals["list_in_result_$fid"]) && !empty($vals["list_in_result_$fid"])) {
      $result_fields = array_merge($result_fields, explode(';', $vals["path_$fid"]));
    }

    if (trim($vals["term_$fid"]) == '' && empty($vals["not_empty_$fid"])) continue; // empty fields are ignored

    foreach(explode(';', $vals["path_$fid"]) as $pathid) {
      $path_struct = array(
        'group' => $form_state['storage']['group'],
        'path' => $pathid,
        'term' => $vals["term_$fid"],
//        'match' => ($vals["match_mode_$fid"]) ? 'exact' : 'like',
//        'not_empty' => $vals["not_empty_$fid"],
      );
      
      /*
      if(!$vals["not_empty_$fid"])
        if($vals["match_mode_$fid"])
          $path_struct['match'] = 'exact';
        else
          $path_struct['match'] = 'like';
      else
        $path_struct['match'] = 'not_empty';
      */
      
      if($vals["not_empty_$fid"])
        $path_struct['match'] = 'not_empty';
      else {
        switch($vals["match_mode_$fid"]) {
          case "fuzzy_$fid":
            $path_struct['match'] = 'like';
            break;
          case "exact_$fid":
            $path_struct['match'] = 'exact';
            break;
          case "smaller_$fid":
            $path_struct['match'] = 'smaller';
            break;
          case "smallerequal_$fid":
            $path_struct['match'] = 'smallerequal';
            break;
          case "bigger_$fid":
            $path_struct['match'] = 'bigger';
            break;
          case "biggerequal_$fid":
            $path_struct['match'] = 'biggerequal';
            break;
        }
      }
      
      $structs[] = $path_struct;
    }

    if (count($structs) > 1) $structs = array('op' => 'OR', 'args' => $structs);
    else $structs = $structs[0];
    if (isset($vals["operator_$fid"]) && count($search)) {
      $search = array(
        'op' => $vals["operator_$fid"],
        'args' => array(
          0 => $search,
          1 => $structs
        )
      );
    } else {
      $search = $structs;
    }
  }

  // the user must input something to search for
  if (count($search) == 0) {
    form_set_error('', 'No terms to search for. Please enter some search term(s).');
    return;
  }

  $result_fields = array_unique($result_fields);

  // search the data
  // this is just the number. The function wants the array.
  $group = $form_state['storage']['group'];
  module_load_include('inc', 'wisski_pathbuilder');
  $grouparr = wisski_pathbuilder_getPathData($group);
  $uris = wisski_find_build_result_list($grouparr, $search, NULL, $result_fields);

  if (count($uris) == 0) {
    // there are no results
    form_set_error('', 'No items found. Please widen your search.');
  } else {
    // the results are cached with a generic id
    // the id is stored in the form state and will
    // be used to redirect the user to the result view page
    global $user, $base_root, $base_path;
    
    
    $form_state['storage']['result'] = $uris;
    drupal_load('module', 'wisski');

    $id = $form_state['values']['sid'];
    $status = FALSE;
    if ($id == '') {
      $id = wisski_get_uid();
    } else {
      $status = db_result(db_query("SELECT status FROM {wisski_find} WHERE sid = '%s'", $id));
    }
    if ($status === FALSE) $status = CACHE_TEMPORARY;

/*    
    cache_set("wisski_find_search_$id", $search, 'cache', CACHE_TEMPORARY);
    cache_set("wisski_find_result_$id", $uris, 'cache', CACHE_TEMPORARY);
*/
    db_query("INSERT INTO {wisski_find} (`sid`, `name`, `uid`, `gid`, `search`, `fields`, `result`, `timestamp`, `status`) VALUES ('%s', '', %d, %d, %b, %b, %b, %d, %d)", $id, $user->uid, $group, serialize($search), serialize($result_fields), serialize($uris), time(), $status);

    $form_state['storage']['result_url'] = $form_state['redirect'] = "$base_root${base_path}find/$group/result/$id";

  }

}


function wisski_find_selectPaths2_submit(&$form, &$form_state) {
  // results have been cached
  // just redirect to the result page
  drupal_goto($form_state['storage']['result_url']);
}


function wisski_find_build_result_list($group, $search, $user = NULL, $result_fields = NULL) {

  // search the data
  include_once(dirname(__FILE__) . "/search.inc");
  $uris = wisski_find_search($search);
  if (empty($uris)) return array();

  // tune the result list
  
  // sort out instances that are not accessable for the current user
  foreach ($uris as $uri => $v) {
    $node = node_load(array('nid' => wisski_store_get_nid_for_instance($uri)));
    if (!$node || !node_access('view', $node, $user)) unset($uris[$uri]);
  }

  // what follows is mainly the former function wisski_find_tuneResults()
  $urirank = array();
  foreach ($uris as $uri => $pids) {
    //$urirank[$uri] = count($pids);
    $urirank[count($pids)][] = $uri;
  }
  
  // sort by rank
  arsort($urirank);
  
  $nameduris = array();
  
  // standard modus: sort by name, not by rank
  if(variable_get('wisski_find_sort_by_title', 1)) {
    foreach($urirank as $rank => $rankeduris) {
      foreach($rankeduris as $uri) {
        $ntitle = $group['short_name'];
        
        if (!$ntitle) {
          $node = _wisski_find_getNodeForURI($uri);
          $ntitle = $node->title;
        } else {
          include_once(drupal_get_path('module', 'wisski_pathbuilder') . '/wisski_pathbuilder.inc');
          $ntitle = wisski_pathbuilder_generateGroupName($uri, $group['id']);
          if($ntitle == $uri)
            continue;
        }
            
        // rank is 0
        $nameduris[0][$uri] = $ntitle; 
        
      }
    }
    
    if(!empty($nameduris[0]))
      asort($nameduris[0], SORT_STRING);
    
  } else {
    // go through all ranks
    foreach($urirank as $rank => $rankeduris) {
    
      // and sort by by title
      foreach($rankeduris as $uri) {
        $ntitle = $group['short_name'];

        if (!$ntitle) {
          $node = _wisski_find_getNodeForURI($uri);
          $ntitle = $node->title;
        } else {
          include_once(drupal_get_path('module', 'wisski_pathbuilder') . '/wisski_pathbuilder.inc');
          $ntitle = wisski_pathbuilder_generateGroupName($uri, $group['id']);
          if($ntitle == $uri)
            continue;
        }
      
        $nameduris[$rank][$uri] = $ntitle;
      }
    
      if(!empty($nameduris[$rank]))
        asort($nameduris[$rank], SORT_STRING);
    }
  }
  
    
  $outuris = array();
  foreach($nameduris as $rank => $sorteduris) {
    foreach($sorteduris as $uri => $title) {
      $outuris[$uri] = $uris[$uri];
      $outuris[$uri][0]['title'] = $title;
    }
  }
  

  if (!empty($result_fields)) {

    $missing_fields = array_flip($result_fields);

    $agenda = array($search);
    while (!empty($agenda)) {
      $cur = array_pop($agenda);
      if (isset($cur['path'])) {
        unset($missing_fields[$cur['path']]);
      }
      foreach ($cur as $k => $v) {
        if (is_array($v)) $agenda[] = $v;
      }
    }

    $store = wisski_store_getObj()->wisski_ARCAdapter_getStore();

    // fill missing fields of the result list
    foreach ($outuris as $uri => $data) {
      foreach ($missing_fields as $pathid => $bla) {
         
        $q = wisski_pathbuilder_get_sparql($pathid, "FILTER ( ?x0 = <$uri> ) ", FALSE);
        $rows = $store->query($q, 'rows');

        if ($store->getErrors()) {
          drupal_set_message("errors processing query for path $pathid, query:<br>" . str_replace("\n", "<br>", check_plain($q)) . "<br><ul><li>" . implode('</li><li>',$store->getErrors()) . "</li></ul>", 'error');
          return array();
        }

        foreach ($rows as $r) {
          $outuris[$uri][] = array('path' => $pathid, 'val' => $r['out']);
        }
     }
    }
  }
      
  return $outuris;
}

/** Build page with search results.
* For a big result set, split into multiple pages.
*
*/
function wisski_find_showResult($form_state, $group, $record) {
  global $base_root, $base_path, $base_url;
  // Get the standard drupal pager support
  global $pager_page_array, $pager_total, $pager_total_items;
  $page = isset($_GET['page']) ? $_GET['page'] : 0;
  $pager_page_array = explode(',', $page);
  
  $default_style = isset($_GET['style']) ? $_GET['style'] : NULL;
  if (!in_array($default_style, array('list', 'tiles', 'table'))) {
    $default_style = NULL;
  }

  // fetch the uris from the cache
/*
  $uris = cache_get("wisski_find_result_$id");
  $uris = $uris->data;
*/
  module_load_include('inc', 'wisski_pathbuilder');
  if ($group == NULL) {
    $group = wisski_pathbuilder_getPathData($record['gid']);
  }
  if ($group == FALSE) {
    drupal_set_message(t('Bad search options: Unknown group: @gid', array('@gid' => $record['gid'])));
    return;
  }

  $fields = unserialize(db_decode_blob($record['fields']));
  
  // if the list has the refresh flag we update the list
  // if it is older than the setting says (default: one day)
  if ($record['status'] == WISSKI_FIND_REFRESH && $record['timestamp'] < time() - variable_get('wisski_find_cache_expires', 60 * 60 * 24)) {
    $search = unserialize(db_decode_blob($record['search']));
    $uris = wisski_find_build_result_list($group, $search, user_load($record['user']), $result_fields);
    db_query("UPDATE {wisski_find} SET result = %b, timestamp = %d WHERE sid = '%s'", serialize($uris), time(), $record['sid']);
  } else {
    $uris = unserialize(db_decode_blob($record['result']));
  }
  
  $limit = isset($_GET['limit']) && is_numeric($_GET['limit']) ? intval($_GET['limit']) : 0;
  if (!$limit) $limit = variable_get('wisski_find_resultItemsPerPage_' . $group['id'], variable_get('wisski_find_resultItemsPerPage', 30));
  
  // total sum of uris
  $sum = count($uris);
  
  // pager name
  $element = 0;
  
  // configure pager correctly
  $pager_total_items[$element] = $sum;
  $pager_total[$element] = ceil($pager_total_items[$element] / $limit);
  $pager_page_array[$element] = max(0, min((int)$pager_page_array[$element], ((int) $pager_total[$element]) - 1));
  
  // determine beginning and ending of the items of the page
  $begin = ($page * $limit) + 1;
  $end = $begin - 1 + $limit;
  
  $max = count($uris);
  
  // formulate a nice headline
  $form['heading'] = array(
    '#prefix' => '<label>',
    '#suffix' => '</label>',
    '#value' => t("Hits @s - @e of @m:", array('@s' => $begin, '@e' => min($end,$max), '@m' => $max)),
  );

  // get the correct style. This is used below.
  $style = $default_style;
  if (!$style) $style = variable_get('wisski_find_styleResultPage_' . $group['id'], variable_get('wisski_find_styleResultPage', 'list'));

  if (!empty($fields)) $style = 'table';

  // images? suppose yes!
  $image_support = variable_get('wisski_find_imageSupport_' . $group['id'], variable_get('wisski_find_imageSupport', 'yes'));

  // track the number of items
  $i = 0;
  
  $path_order = wisski_pathbuilder_getPathOrder($group);

  // go through all uris
  foreach($uris as $uri => $pids) {
    $i++;
    // switch to the correct one
    if ($i < $begin) continue;
    if ($i > $end) break;

    $ntitle = $uris[$uri][0]['title'];
    unset($uris[$uri][0]['title']);
    
    $image_url = '';
    if($image_support == "yes") {
      $imgs = wisski_images_getImages(wisski_store_getObj()->wisski_ARCAdapter_addNamespace($uri), 1);
      preg_match('/<img src="(.*?)"/', $imgs, $matches);
      if(!empty($matches[1])) {
        $image_url = $matches[1];
      } else {
        $nopic = path_to_theme() . '/pics/img_nopic.png';
        if(is_file($nopic)) {
          $image_url = $base_url . '/' . $nopic;
        }
      }
    }
    
    $title_link = "<a class='wisski-find-result-title' href='$uri'>" . strtr($ntitle, array('&' => '&amp;', '<' => '&lt;')) . '</a>';
    $image_link = empty($image_url) ? '' : "<a class='wisski-find-result-thumb' href='$uri'><img src='$image_url'/></a>";

    if ($style == 'table') {
    
      $row = $image_support ? array($image_link) : array();

      foreach ($fields as $pathid) {
        $values = array();
        foreach($pids as $pair) {
          if ($pair['path'] == $pathid) $values[$pair['val']] = $pair['val'];
        }
        $value = join(', ', $values);
        $link = "<a class='wisski-find-result-cell' href='$uri'>" . strtr($value, array('&' => '&amp;', '<' => '&lt;')) . '</a>';
        $row[] = $link;
      }

      $list[] = $row;
    
    } else {
      
      $value = $image_link . $title_link;
      if (variable_get('wisski_find_resultPreviewValues', TRUE)) {
        $value .= '<span class="wisski-find-values" style="font-size:90%">';
        $preview = array();
        foreach($uris[$uri] as $a) $preview[] = implode(";", $a);
        $preview = array_unique($preview);
        foreach($path_order as $path) {
          foreach($preview as $p) {
            $p = explode(';', $p, 2);
            if ($p[0] == $path['id']) $value .= '<br/><strong>' . $path['name'] . ': </strong>' . $p[1];
          }
        }
        $value .= '</span>';
      }
    
      $list[] = array('data' => $value, 'class'=> 'wisski_resultitem'); 
    }  
  }

  // render all items
  if ($style == 'table') {
    $headers = array();
    if ($image_support) $headers[] = '';
    foreach ($fields as $pathid) {
      foreach ($path_order as $path) {
        if ($path['id'] == $pathid) $headers[] = $path['name'];
      }
    }
    $form['items'] = array(
      '#value' => theme('table', $headers, $list, array('class' => "wisski_result$style")),
    );
  } else {
    $form['items'] = array(
      '#value' => theme('item_list', $list, NULL, 'ul', array('class' => "wisski_result$style")),
    );
  }
   
  // render the pager     
  $form['pager'] = array(
   '#value' =>  theme('pager', NULL, 10, 0),
  );

  
  // make a nice export button
  $form['export'] = array(
    '#type' => 'image_button',
    '#attributes' => array('src' => base_path() . 'sites/all/modules/wisski_find/export_excel.png', 'alt' => t('Export to Excel')), 
    '#submit' => array('wisski_find_export'),
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );
  
  // 
  $form['sid'] = array(
    '#type' => 'hidden',
    '#value' => $record['sid'],
  );
  $form['store'] = array(
    '#type' => 'fieldset',
    '#title' => 'Bookmark this search result',
    '#prefix' => '<p>',
    '#suffix' => '</p>',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['store']['list_wrap_begin'] = array(
    '#type' => 'markup',
    '#value' => '<ul>',
    '#weight' => 0,
  );
  $form['store']['list_wrap_end'] = array(
    '#type' => 'markup',
    '#value' => '</ul>',
    '#weight' => 1000,
  );

  // fill the bookmark fieldset depending on
  // the status of the list and user permissions
  if ($record['status'] == CACHE_TEMPORARY) {
    $form['store']['note_temp'] = array(
      '#type' => 'markup',
      '#prefix' => '<li>',
      '#suffix' => '</li>',
      '#value' => t('You can access this search result with <a href="!l">this URL</a>. It will be cached approximately one day.', array('!l' => url($base_root . $base_path . 'find/' . $group['id'] . '/result/' . $record['sid']))),
      '#weight' => 200,
    );

    if (user_access('save wisski find results')) {
      $form['store']['note_save'] = array(
        '#type' => 'markup',
        '#prefix' => '<li>',
        '#suffix' => '</li>',
        '#value' => t('You can bookmark this result list permanently by clicking on the button below. Optionally, you can also give it a name and specify whether it should be updated.'),
        '#weight' => 400,
      );
      $form['store']['note_save']['store_name'] = array(
        '#type' => 'textfield',
        '#title' => 'Name',
        '#description' => t('This string will be displayed as page title.'),
        '#weight' => 410,
      );
      $form['store']['note_save']['store_refresh'] = array(
        '#type' => 'checkbox',
        '#title' => 'Refresh the result list',
        '#description' => t('If checked, the result list will be updated regularly. If unchecked, the list will remain as is, without reflecting changes in the data.'),
        '#weight' => 420,
      );
      $form['store']['note_save']['store_submit'] = array(
        '#type' => 'submit',
        '#value' => 'Save',
        '#submit' => array('wisski_find_save_record'),
        '#weight' => 430,
      );
    }
  } else {
    $form['store']['note_delete'] = array(
      '#type' => 'markup',
      '#prefix' => '<li>',
      '#suffix' => '</li>',
      '#value' => t('You can delete the result list by clicking the button below.'),
      '#weight' => 400,
    );
    $form['store']['store_delete'] = array(
      '#type' => 'submit',
      '#value' => 'Delete',
      '#submit' => array('wisski_find_delete_record'),
      '#weight' => 410,
    );
  
    if ($record['status'] != WISSKI_FIND_REFRESH && user_access('directly access wisski find')) {    
      
      $form['store']['note_new'] = array(
        '#type' => 'markup',
        '#prefix' => '<li>',
        '#suffix' => '</li>',
        '#value' => t('You can start this search anew with <a href="!l">this URL</a>.', array('!l' => url($base_root . $base_path . 'find/' . $group['id'] . '/do', array('query' => array('search' => drupal_to_js(unserialize(db_decode_blob($record['search'])))))))),
        '#weight' => 100,
      );

    } elseif ($record['status'] == WISSKI_FIND_REFRESH && user_access('save wisski find results')) {
      
      $form['store']['note_refresh'] = array(
        '#type' => 'markup',
        '#prefix' => '<li>',
        '#suffix' => '</li>',
        '#value' => t('You may refresh the list now to reflect latest changes.'),
        '#weight' => 420,
      );
      $form['store']['store_refresh'] = array(
        '#type' => 'submit',
        '#value' => 'Refresh',
        '#submit' => array('wisski_find_refresh_record'),
        '#weight' => 430,
      );

    }

  }
  
  return $form;
}


function wisski_find_save_record($form, $form_state) {
  
  $sid = $form_state['values']['sid'];
  $name = trim($form_state['values']['store_name']);
  $status = $form_state['values']['store_refresh'] ? 1 : 2; 

  $gid = db_result(db_query("SELECT gid FROM {wisski_find} WHERE sid = '%s'", $sid));
  if ($gid !== FALSE) {
    global $base_root, $base_path;
    db_query("UPDATE {wisski_find} SET `status` = %d, `name` = '%s' WHERE sid = '%s'", $status, $name, $sid);
    $msg = ' ' . t('You may access the results using <a href="!l">this URL</a>.', array('!l' => url($base_root . $base_path . 'find/' . $gid . '/result/' . $sid)));
    if ($name != '') {
      drupal_set_message(t('Search result saved successfully as %name.', array('%name' => $name)) . $msg);
    } else {
      drupal_set_message(t('Search result saved successfully.') . $msg);
    }
  } else {
    drupal_set_message(t('Bad search result ID: @id', array('@id' => $sid)), 'error');
  }
  
}


function wisski_find_refresh_record($form, $form_state) {
  
  $sid = $form_state['values']['sid'];
  db_query("UPDATE {wisski_find} SET timestamp = 0 WHERE sid = '%s'", $sid);
  
}


/** Submit handler for deleting a result
*/
function wisski_find_delete_record($form, $form_state) {
  
  $sid = $form_state['values']['sid'];
  $check = db_result(db_query("SELECT status FROM {wisski_find} WHERE sid = '%s'", $sid));
  if ($check !== FALSE) {
    db_query("DELETE FROM {wisski_find} WHERE sid = '%s'", $sid);
    drupal_set_message(t('Search result deleted successfully.'));
    global $base_root, $base_path;
    drupal_goto($base_root . $base_path . 'find');
  } else {
    drupal_set_message(t('Bad search result ID: @id', array('@id' => $sid)), 'error');
  }

}



function wisski_find_export($form, $form_state) {
  
  // the id for the search and thus for the filename
  $id = arg(3);
  
  // the id of the group
  $groupid = arg(1);

  // get the data for the search  
  $tmp = db_query("SELECT * FROM {wisski_find} WHERE sid = '%s'", $id);
  $record = db_fetch_array($tmp);
  
  // if it is already deleted, bad luck...
  if (!$record) {
    drupal_set_message('The search result was deleted from cache already. Try a new search.', 'error');
    drupal_goto("$base_root${base_path}find");
    return;
  }

  // get the relevant uris
  $uris = unserialize(db_decode_blob($record['result']));
  
  // open a temporary file
  $filename = file_directory_temp() . "/" . $id . ".xls";

  $fh = fopen($filename, "w+");

  $ftype = variable_get('wisski_find_export_path_type', 7);
  
  $pathIds = wisski_pathbuilder_getEnabledInternaMembers($groupid, TRUE, TRUE, $ftype);
  
  foreach($pathIds as $pathid) {
    $pathdata = wisski_pathbuilder_getPathData($pathid);
    fwrite($fh, iconv('UTF-8', 'cp1250', $pathdata['name']) . "\t");
  }
  fwrite($fh, "\n");
  
  foreach($uris as $uri => $values) {
    foreach($pathIds as $pathid) {
      $sparql = wisski_pathbuilder_get_sparql($pathid, 'FILTER ( ?x0 = <' . $uri . '> )', FALSE, 0, TRUE, array('?out'));
      
      $sprows = wisski_store_getObj()->wisski_ARCAdapter_getStore()->query($sparql, 'rows');
#      if(count($sprows) > 1)
      fwrite($fh, "\"");

      $i = 0;
      foreach($sprows as $sprow) {
        $var = strip_tags($sprow['out']);
        $var = str_replace('"', '""', $var);
        fwrite($fh, iconv('UTF-8', 'cp1250', $var));
                        
        $i++;
        if($i < count($sprows))
          fwrite($fh, "\n");
      }
#      if(count($sprows) > 1)   
      fwrite($fh, "\"");
      fwrite($fh, "\t");
    }
    fwrite($fh, "\n");
  }
  

  fclose($fh);


  header("Pragma: public");
  header("Expires: 0");
  header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
  header("Cache-Control: private",false);
  header("Content-Type: application/vnd.ms-excel");
  header("Content-Disposition: attachment; filename=\"" . basename($filename) . "\";" );
  header("Content-Transfer-Encoding: binary");

  readfile($filename);


  flush();  
  
  unlink($filename);
}

/** helper function to arrange hit fields in results
*/
function wisski_pathbuilder_getPathOrder($group) {
  
  $ftype = wisski_pathbuilder_getPathbuilderTrees();
  $ftype = array_search('Find', $ftype);
  if ($ftype === FALSE) $ftype = 2;
 
  $order = array();
  foreach(wisski_pathbuilder_getEnabledInternaMembers($group['id'], TRUE, FALSE, $ftype) as $id) {
    
    $path = wisski_pathbuilder_getPathData($id);
    if ($path['is_group']) {
      $order = array_merge($order, wisski_pathbuilder_getPathOrder($path));
    } else {
      $order[] = $path;
    }
    
  }
  
  return $order;
  
}
  

/** Build a search field, ie. a row in the search field table
* 
*/
function _wisski_find_searchField($group, $id, $has_operator = TRUE, $toplevel = TRUE) {
  
  // get an array with all path definintions
  $paths = _wisski_find_getSearchPaths($group, '', '  ', '  '); // using nonbreaking space! do not alter!
  //$paths = _wisski_find_getSearchPaths($group, '', '- ', '- '); // using nonbreaking space! do not alter!

  // options array for path select form field
  // Path or group names map to ids of paths that will be searched (key)
  $pathopt = array();
  foreach ($paths as $path) $pathopt[implode(';', $path['ids'])] = $path['name'];
  
  // get the default value for field $id
  // ($id is actually the $id'th field in the search form)
  $j = 0;
  foreach ($pathopt as $k => $v) {
    if ($toplevel && strpos($v, '    ') === 0) continue;  // skip paths of subgroups, show subgroups instead
    if (! $toplevel && strpos($k, ';')) continue;         // skip subgroups
    if ($j++ == $id) {
      $defopt = $k;
      break;
    }
  }
  
  $form["searchField_$id"] = array(
    "operator_$id" =>
      ($has_operator) ? 
      array(
        '#type' => 'select',
        '#default_value' => variable_get('wisski_find_default_op', 'OR'),
        '#options' => array('OR' => t('OR'), 'AND' => t('AND'), 'NOT' => t('NOT')),
      )
      :
      array(),
    "path_$id" => array(
      '#type' => 'select',
      '#options' => $pathopt,
      '#default_value' => $defopt,
    ),
    "term_$id" => array(
      '#type' => 'textfield',
      '#size' => 30,
      '#default_value' => "",
    ),
    "list_in_result_$id" => array(
      '#type' => 'checkbox',
      '#title' => t('list'),
    ),
   
    "match_mode_$id" => array(
      '#type' => 'select',
      '#options' => array("fuzzy_$id" => t('any match'), "exact_$id" => t('exact match'), "smaller_$id" => t('smaller than'), "smallerequal_$id" => t('smaller or equal than'), "bigger_$id" => t('bigger than'), "biggerequal_$id" => t('bigger or equal than'),),
      '#default_value' => "fuzzy_$id",
    ),
    
    /*
    "match_mode_$id" => array(
      '#type' => 'checkbox',
      '#title' => t('exact match'),
    ),
    */
    "not_empty_$id" => array(
      '#type' => 'checkbox',
      '#title' => t('not empty'),
    ),
    /*
    "smaller_$id" => array(
      '#type' => 'checkbox',
      '#title' => t('<'),
    ),
    "smallerequal_$id" => array(
      '#type' => 'checkbox',
      '#title' => t('<='),
    ),
    "bigger_$id" => array(
      '#type' => 'checkbox',
      '#title' => t('>'),
    ),
    "biggerequal_$id" => array(
      '#type' => 'checkbox',
      '#title' => t('>='),
    ),
    */

  );

  return array($id, $form);

};



function theme_wisski_find_searchFieldset($form) {
  $order = array('operator_', 'path_', 'term_', 'not_empty_', 'match_mode_', 'list_in_result_'); //, 'add_');

  $rows = array();
  foreach (element_children($form) as $f) {
    $row = array();
    $id = substr($f, 12); // strlen('searchField_')
    foreach ($order as $o) $row[] = drupal_render($form[$f]["$o$id"]);
    $rows[] = $row;
  }

  $out = '<div id="' . $form['#ahah_wrapper'] . '">';
  $out .= theme('table', NULL, $rows);
  $out .= '</div>';
  
  return $out;

}

function wisski_find_selectGroup_validate($form, &$form_state) {

  $gid = $form_state['values']['groups'];
  if ($gid == NULL) form_set_error('groups', t('Please select a category.'));

}



function wisski_find_selectGroup_submit($form, &$form_state) {
  global $base_root, $base_path;
  
  $name = $form_state['values']['groups'];
  $form_state['redirect'] = "$base_root$base_path" . "find/$name";

} 

function _wisski_find_getNodeForURI($uri) {
  global $base_path;
  
  $uri = parse_url($uri);
  $uri = $uri['path'];
  if (strpos($uri, $base_path) !== 0) {
    return NULL;
  }
  
  $uri = substr($uri, strlen($base_path));
  
  $uri = drupal_get_normal_path($uri);
  $nid = arg(1, $uri);
  
  $node = node_load(array('nid' => $nid));
  
  if ($node === FALSE || $node === NULL) return NULL;
  
  return $node;
  
}


/** Get searchable groups and set menu links 
* @author Mark Fichtner
*/
function wisski_find_add_groups() {
  include_once(drupal_get_path('module', 'wisski_pathbuilder') . '/wisski_pathbuilder.inc');
  $myIDs = variable_get('wisski_findMenus', array());

  $groups = wisski_pathbuilder_getGroups();

  $saveIDs = array();
  
  foreach($myIDs as $id => $itemid) {
    $oldlinks[$itemid] = menu_link_load($id);
    if(!in_array($itemid, $groups))
      menu_link_delete($id);
  }

  
  $ret = array();
    
  foreach($groups as $group) {

    $data = wisski_pathbuilder_getPathData($group);
    
    if(variable_get("wisski_find_show_only_main_groups", 1))
      if($data['group_id'] != 0)
        continue;
    
    if(!($data['enabled']))
      continue;
    $item = array();
    $item['link_path'] = ("find/" . $data['id']);
    $item['link_title'] = $data['name'];
    $item['menu_name'] = isset($oldlinks[$group]['menu_name']) ? $oldlinks[$group]['menu_name']: "navigation";
    $item['weight'] = isset($oldlinks[$group]['weight']) ? $oldlinks[$group]['weight'] : 0;
    $item['expanded'] = isset($oldlinks[$group]['expanded']) ? $oldlinks[$group]['expanded'] : 0;
    $item['options'] = array();
    $item['mlid'] = isset($oldlinks[$group]['mlid']) ? $oldlinks[$group]['mlid'] : NULL;
    $item['hidden'] = isset($oldlinks[$group]['hidden']) ? $oldlinks[$group]['hidden'] : 0;
    $item['plid'] = isset($oldlinks[$group]['plid']) ? $oldlinks[$group]['plid'] : NULL;
    
    $id = menu_link_save($item);
    $saveIDs[$id] = $group;
    if($item['hidden'] == 0) { 

      if(module_exists("menu_per_role")) {
        if(is_null(_menu_per_role_access($item))) {
      	  $string = '<dt>' . l($data['name'], ("find/" . $group)) . '</dt>';
      	  if(!empty($data['description']))
      	    $string .= '<dd>' . $data['description'] . '</dd>';
          if(!empty($item['weight']))
            $ret[$item['weight']] = $string;
          else 
            $ret[] = $string;
      	}
      } else {
        $string = '<dt>' . l($data['name'], ("find/" . $group)) . '</dt>';
        if(!empty($data['description']))
          $string .= '<dd>' . $data['description'] . '</dd>';
        if(!empty($item['weight']))
          $ret[$item['weight']] = $string;
        else
          $ret[] = $string;
      }
    }
  }

  ksort($ret);

  variable_set('wisski_findMenus', $saveIDs);

  return $ret;
  

}

/** Set the menu links
* @author Mark Fichtner
*/
function wisski_find_enable() {
  wisski_find_add_groups();
}

  
function wisski_find_do_find($group) {
  
  $options = (object) array(
    'sid' => '',
    'status' => CACHE_TEMPORARY,
    'name' => '',
    'fields' => '',
  );
  wisski_parse_http_params($options, 'options');
  $search = array();
  $search = wisski_parse_http_params($search, 'search');
  if (empty($search)) {
    drupal_set_message(t('Bad search parameter'));
    return;
  }
  $search = (array) $search;
  
  $sid = trim($options->sid);
  if (empty($sid)) $sid = wisski_get_uid();

  if (preg_match('/^[1-9][0-9]*(,[1-9][0-9]*)*$/u', $options->fields)) {
    $options->fields = explode(',', $options->fields);
  } else {
    $options->fields = array();
  }
  
  $u = db_result(db_query("SELECT uid FROM {wisski_find} WHERE sid = '%s'", $sid));
  if ($u !== FALSE) $u = user_load($u);

  // (re)build the result list
  // if we rebuild the list, we do it as if the original user did it
  // if it's a new search, use the current user
  $uris = wisski_find_build_result_list($group, $search, $u);

  if ($u !== FALSE) {
    // we update an existing result list
    db_query("UPDATE {wisski_find} SET result = %b, timestamp = %d WHERE sid = '%s'", serialize($uris), time(), $sid);
  } else {
    // insert a new result list
    global $user;
    // check permission to save a result
    if (!user_access('save wisski find results', $user)) $options->status = CACHE_TEMPORARY;

    db_query("INSERT INTO {wisski_find} (sid, name, uid, gid, search, fields, result, timestamp, status) VALUES ('%s', '%s', %d, %d, %b, %b, %b, %d, %d)", $sid, $options->name, $user->uid, $group['id'], serialize($search), serialize($options->fields), serialize($uris), time(), $options->status);

  }

  drupal_goto('find/' . $group['id'] . '/result/' . $sid);
  
}


